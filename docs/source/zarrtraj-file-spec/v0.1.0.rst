.. _zarrtraj_spec:

ZarrTraj Specification
======================

The *ZarrTraj* trajectory file format is based on the streamable, compressible
`Zarr` file format.

Units
-----

Zarrtraj only supports the following units, meaning implementations must
handle conversion:

.. list-table
   :widths: 25 25 25
   :header-rows: 1

   * - Quantity
     - Unit
     - Abbreviation
   * - Time
     - picosecond
     - ps
   * - Distance
     - nanometer
     - nm
   * - Velocity
     - nanometer / picosecond
     - nm/ps
   * - Force
     - kilojoules / (mol * nanometer)
     - kJ/(mol*nm)

Zarrtraj implementations should fail out if any other units are encountered.
All zarrtraj units must be present in file even if they are not used.

Positions are in absolute units and are not relative to the box vectors.

Structure
---------

Notation
^^^^^^^^

- ``(name)`` is a Zarr group
- ``{name}`` is an optional Zarr group
- ``[variable]`` is a Zarr array
- ``<dtype>`` is the Zarr array datatype
- ``+--`` is a required attribute of a group or Zarr array
- ``---`` is an optional attribute of a group or Zarr array

.. code-block:: none

        Zarr root
         +-- version : <str>, Zarrtraj specification version
         \-- (metadata)
                --- authors : <str>
                --- <some_attribute> : <str>, arbitrary attribute which contains user-defined metadata
         \-- (particles)
            \-- (units)
                +-- length : <str>, "nm"
                +-- velocity : <str>, "nm/ps"
                +-- force : <str>, "kJ/(mol*nm)"
                +-- time : <str>, "ps"
            \-- (box)
                +-- boundary : <str>, boundary conditions of unit cell.
                                      either "periodic" or "none" (see below)
                \-- [dimensions] : <float>, gives box dimensions array in triclinic vectors 
                                            with shape (n_frames, 3, 3)
            
            +-- [step] : <int>, array of integration steps at which 
                                positions, velocities, and forces were sampled
                                with shape (n_frames)
            +-- [time] : <float32>, array of simulation times at which 
                                  positions, velocities, and forces were sampled
                                  given in physical units with shape (n_frames)
            +-- [positions] : <float32>, gives array of positions
                                         with shape (n_frames, n_atoms, 3)
            +-- [velocities] : <float32>, gives array of velocities
                                          with shape (n_frames, n_atoms, 3)
            +-- [forces] : <float32>, gives array of forces
                                      with shape (n_frames, n_atoms, 3)
            --- [subselection] : <int>, optional array of indices of atoms which 
                                        make up a selected subsystem of the trajectory 
                                        at each frame with shape
                                        (n_frames, n_selected_atoms)
            \-- {observables}
                --- [<observable>] : <dtype>
        \-- {userdata} : Optional scratch space for arbitrary data the user wishes to include in the file

Boundary values:
""""""""""""""""

"periodic" : The simulation box is periodically continued along the given dimension and serves as the unit cell for an infinite tiling of space.
             Any arbitrary box shape is supported and only 3 dimensionional boxes are allowed.

"none" : No boundary condition is imposed. This summarizes the situations of open systems (i.e., an infinitely large box) and closed systems (e.g., due to an impenetrable wall). 
         In such systems, the "dimensions" array is not necessary.


Additional Requirements
-----------------------

* The zarrtraj file must contain at least one of positions, velocities, or forces.
* Positions, velocities, forces, and observables must be sampled at the same rate.
  Future versions of Zarrtraj may relax this requirement.
* The step & time arrays must increase monotonically.